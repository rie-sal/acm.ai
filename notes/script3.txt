

// this relic script attempted to display events from an .ics link of the google calendar
// however, it created cors errors

// Global variables
const events = [];
const calendarGrid = document.querySelector('.calendar-grid');
const eventList = document.getElementById('event-list');
const monthYearDisplay = document.getElementById('month-year');

// Fetch and parse the .ics file from Google Calendar
fetch('https://calendar.google.com/calendar/ical/bea3c558d615d9630b391ba92fabb971797e17114d92bbd6330111ebf1d8c8d8%40group.calendar.google.com/public/basic.ics')
  .then(response => response.text())
  .then(data => parseICSFile(data))
  .catch(error => {
    console.error('Error fetching calendar:', error);
    // Add error handling UI feedback here
  });

function parseICSFile(data) {
  const jcalData = ICAL.parse(data);
  const comp = new ICAL.Component(jcalData);
  const vevents = comp.getAllSubcomponents('vevent');
  
  events.length = 0; // Clear the global array
  vevents.forEach(event => {
    const eventDetails = new ICAL.Event(event);
    events.push({
      title: eventDetails.summary,
      description: eventDetails.description,
      startDate: eventDetails.startDate.toJSDate(),
      endDate: eventDetails.endDate.toJSDate(),
    });
  });

  console.log('Parsed events:', events);
  generateCalendar(new Date().getMonth(), new Date().getFullYear());
}

function generateCalendar(month, year) {
  // Update month/year display
  monthYearDisplay.textContent = `${getMonthName(month)} ${year}`;

  // Clear existing day cells (but keep headers)
  const dayCells = calendarGrid.querySelectorAll('.day-cell');
  dayCells.forEach(cell => cell.remove());

  // Get first day of month and total days
  const firstDay = new Date(year, month, 1).getDay();
  const daysInMonth = new Date(year, month + 1, 0).getDate();

  // Add empty cells for days before the first of the month
  for (let i = 0; i < firstDay; i++) {
    const emptyCell = document.createElement('div');
    emptyCell.classList.add('day-cell', 'empty');
    calendarGrid.appendChild(emptyCell);
  }

  // Generate the days
  for (let day = 1; day <= daysInMonth; day++) {
    const dayCell = document.createElement('div');
    dayCell.classList.add('day-cell');
    
    // Add date number
    const dateNumber = document.createElement('span');
    dateNumber.textContent = day;
    dayCell.appendChild(dateNumber);

    // Check for events on this day
    const hasEvent = events.some(event => {
      const eventDate = event.startDate;
      return eventDate.getDate() === day &&
             eventDate.getMonth() === month &&
             eventDate.getFullYear() === year;
    });

    if (hasEvent) {
      const dot = document.createElement('div');
      dot.classList.add('event-dot');
      dayCell.appendChild(dot);
    }

    // Add click handler
    dayCell.addEventListener('click', () => showDayEvents(day, month, year));
    
    // Highlight today's date
    const today = new Date();
    if (day === today.getDate() && 
        month === today.getMonth() && 
        year === today.getFullYear()) {
      dayCell.classList.add('today');
    }

    calendarGrid.appendChild(dayCell);
  }
}

function showDayEvents(day, month, year) {
  // Clear previous selection
  const selectedCell = document.querySelector('.day-cell.selected');
  if (selectedCell) {
    selectedCell.classList.remove('selected');
  }

  // Add selected class to clicked cell
  const dayElements = document.querySelectorAll('.day-cell');
  const firstDayOfMonth = new Date(year, month, 1).getDay();
  const targetDayElement = dayElements[firstDayOfMonth + day - 1];
  if (targetDayElement) {
    targetDayElement.classList.add('selected');
  }

  // Clear and populate event list
  eventList.innerHTML = '';
  const dayEvents = events.filter(event => {
    const eventDate = event.startDate;
    return eventDate.getDate() === day &&
           eventDate.getMonth() === month &&
           eventDate.getFullYear() === year;
  });

  if (dayEvents.length === 0) {
    const noEvents = document.createElement('div');
    noEvents.classList.add('no-events');
    noEvents.textContent = 'No events scheduled for this day';
    eventList.appendChild(noEvents);
    return;
  }

  dayEvents.forEach(event => {
    const eventCard = document.createElement('div');
    eventCard.classList.add('event-card');
    
    const eventTime = document.createElement('div');
    eventTime.classList.add('event-time');
    eventTime.textContent = event.startDate.toLocaleTimeString([], { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
    
    const eventTitle = document.createElement('div');
    eventTitle.classList.add('event-title');
    eventTitle.textContent = event.title;
    
    const eventDescription = document.createElement('div');
    eventDescription.classList.add('event-description');
    eventDescription.textContent = event.description || 'No description available';
    
    eventCard.appendChild(eventTime);
    eventCard.appendChild(eventTitle);
    eventCard.appendChild(eventDescription);
    eventList.appendChild(eventCard);
  });
}

function getMonthName(monthIndex) {
  return new Date(2024, monthIndex).toLocaleString('default', { month: 'long' });
}

// Initialize calendar
document.addEventListener('DOMContentLoaded', () => {
  const today = new Date();
  generateCalendar(today.getMonth(), today.getFullYear());
});